# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

# Theme
ZSH_THEME="powerlevel10k/powerlevel10k"

# Plugins
plugins=(z golang docker vagrant zsh-syntax-highlighting)

source $ZSH/oh-my-zsh.sh

# User configuration

# docker (thanks pry0cc & ropnop)

# nmap

nmap_quick(){
    sudo nmap -sS -sCV -T4 -Pn --top-ports 5000 -oA ./nmap-quick-$1-5000p-%m%d --max-retries 4 --host-timeout 90m  --script-timeout 90m $1
}

nmap_ss(){
    sudo nmap -sS -T4 -Pn -p- -oA ./nmap-ss-$1-65535p-%m%d --max-retries 4 --host-timeout 90m  --script-timeout 90m $1
}

nmap_su(){
    sudo nmap -sU -T4 -Pn -p- -oA ./nmap-su-$1-65535p-%m%d --max-retries 4 --host-timeout 90m  --script-timeout 90m $1
}

# takes in host, target ports, and script regex
nmap_trgt_scrpt(){
    echo 'nmap_trgt_scrpt IP PORT REGEX'
    sudo nmap -sSCV -O -Pn -p $2  -oA ./nmap-scrpt-$1-trgtp-%m%d --max-retries 4 --host-timeout 90m  --script-timeout 90m --script=$3 $1
}

nmapprev(){
    find -type f -name 'nmap-*.gnmap' -exec cat {} \; | grep 'Host' | sort -u | grep -vi 'up' | vi - 
}

nsearch(){
    ls -l /usr/share/nmap/scripts/* | grep -i $1 | awk -F 'scripts/' '{ print $2 }'
}

# ffuf (thank you rez0)
ffuf_quick_dir(){
    dom=$(echo $1 | unfurl format %s-%d)
    echo 'ffuf -u '$1'/FUZZ -w $DIRS_LARGE -o ffuf_quick_dirs_'$dom'.csv'
    ffuf -u $1/FUZZ -w $DIRS_LARGE -o ffuf_quick_dirs_$dom.csv
}

ffuf_quick_file(){
    dom=$(echo $1 | unfurl format %s-%d)
    echo 'ffuf -u '$1'/FUZZ -w $FILES_LARGE -o ffuf_quick_files_'$dom'.csv'
    ffuf -u $1/FUZZ -w $FILES_LARGE -o ffuf_quick_files_$dom.csv
}

# takes a param of a url and a wordlist
ffuf_recursive(){
  dom=$(echo $1 | unfurl format %s-%d)
  echo 'ffuf -u '$1'/FUZZ -w '$2' -recursion -recursion-depth 5 -o ffuf_recursive_'$dom'.csv'
  ffuf -u $1/FUZZ -w $2 -recursion -recursion-depth 5 -o ffuf_recursive_$dom.csv
}

# takes a param of a url
ffuf_file_ext(){
  dom=$(echo $1 | unfurl format %s-%d)
  echo 'ffuf -u '$1'/FUZZEXT -w $EXT_SMALL:EXT -w $WORDS_SMALL:FUZZ -o ffuf-file_ext_'$dom'.csv'
  ffuf -u $1/FUZZEXT -w $EXT_SMALL:EXT -w $WORDS_SMALL:FUZZ -o ffuf-file_ext_$dom.csv
}

ffuf_vhost(){
    dom=$(echo $1 | unfurl format %s-%d)
    domain=$(echo $1 | unfurl format %d)
    rootdom=$(echo $1 | unfurl format %r)
    # creates a local wordlist with domain and root domain subs
    cat $VHOSTS | sed 's/%d/'"$domain"'/' | sed 's/%r/'"$rootdom"'/' > ./vhosts_wordlist_$dom.txt
    echo 'ffuf -u '$1' -H "Host: FUZZ" -w ./vhosts_wordlist_'$dom'.txt -fc 400,404 -o ffuf_vhost_'$dom'.csv'
    ffuf -u $1 -H "Host: FUZZ" -w ./vhosts_wordlist_$dom.txt -fc 400,404 -o ffuf_vhost_$dom.csv
}

ffufprev(){
    find -name "ffuf_*.csv" -exec cat {} \; | grep -vE ',302,|,429,|,400,|,404,|,500,|,501,|,502,|,503,' | sed 's/,/ /g' | sort -k 5,5 -u -n | column -t -s' '  | vim -
}

# nuclei (thanks rez0)
nuclei_site(){
    echo $1 | nuclei -t cves/ -t exposed-tokens/ -t exposed-tokens/ \
		-t exposed-tokens/ -t vulnerabilities/ -t fuzzing/ -t misconfiguration/ \
		-t miscellaneous/dir-listing.yaml -H "User-Agent: Mozilla Firefox Mozilla/5.0" -c 30
}
nuclei_file(){
    nuclei -l $1 -t cves/ -t exposed-tokens/ -t exposed-tokens/ \
		-t exposed-tokens/ -t vulnerabilities/ -t fuzzing/ -t misconfiguration/ \
		-t miscellaneous/dir-listing.yaml -H "User-Agent: Mozilla Firefox Mozilla/5.0" -c 50
}

# http verb tampering (thanks rez0)
tamper_verbs() {
    echo -n "$1: "; for i in GET POST HEAD PUT DELETE CONNECT OPTIONS TRACE PATCH ASDF; \
	do echo "echo -n \"$i-$(curl -k -s -X $i $1 -o /dev/null -w '%{http_code}') \""; done \
	| parallel -j 10 ; echo
}

# httprobe wrapper (thanks rez0)
httprobemore(){
	httprobe -p http:8000 -p https:9443 -p http:8080 -p https:8443 \
        -p http:81 -p http:591 -p http:2082 -p http:2087 -p http:2095 -p http:2096 -p http:3000 -p http:8001 -p http:8008 \
        -p http:8080 -p http:8083 -p http:8834 -p http:8888 -p https:81 -p https:591 -p https:2082 -p https:2087 -p https:2095 \
        -p https:2096 -p https:3000 -p https:8001 -p https:8008 -p https:8080 -p https:8083 -p https:8834 -p https:8888 \
        -c 50 -t 1000
}

# linkfinder (thanks rez0)
linkfinder_url(){
	python3 ~/tools/linkfinder/linkfinder.py -i $1 -d -o cli \
	| grep -v http | grep -v // | sed 's/^\.\//\//' | sed 's/^\///'
}

# secretfinder
secretfinder_url(){
    python3 ~/tools/secretfinder/SecretFinder.py -i $1 -e -g 'bootstrap;api.google.com' -o cli
}

# convert .bin to shellcode (thanks pry0cc)
function bin2shellcode {
    hexdump -v -e '"\\""x" 1/1 "%02x" ""' ${1}
}

# axiom (thanks rez0)
makefleet(){
    fleet=$1

    total=0
    while [[ "$total" -lt $2 ]];
    do
        axiom-fleet "$fleet" -i=10
        total=$((total+10))
        echo "Spun up $total"
        sleep 60
    done
}

# cidr2ip
cidr2ip(){
	nmap -sL $1 | awk '/Nmap scan report/{print $NF}'
}

# wordlists (thanks Rez0)
add_word(){
	echo $1 | anew ~/wordlists/custom/new-word-tokens.txt
}

add_word_from_file(){
	while read line;do add_to_dir_wls $line;done < $1
}

# vars

export DIRS_LARGE=~/wordlists/assetnote-wordlists/data/manual/raft-large-directories.txt
export DIRS_SMALL=~/wordlists/assetnote-wordlists/data/manual/raft-small-directories.txt
export FILES_LARGE=~/wordlists/assetnote-wordlists/data/manual/raft-large-files.txt
export FILES_SMALL=~/wordlists/assetnote-wordlists/data/manual/raft-small-files.txt
export WORDS_LARGE=~/wordlists/assetnote-wordlists/data/manual/raft-large-words.txt
export WORDS_SMALL=~/wordlists/assetnote-wordlists/data/manual/raft-small-words.txt
export EXT_LARGE=~/wordlists/assetnote-wordlists/data/manual/raft-large-extensions.txt
export EXT_SMALL=~/wordlists/assetnote-wordlists/data/manual/raft-small-extensions.txt

export MY_DIRS=~/wordlists/custom/w00k0-dirs.txt
export MY_FILES=~/wordlists/custom/w00k0-files.txt

export VHOSTS=~/wordlists/custom/vhosts.txt

# Aliases
alias ll='ls -l'                                                                                                                                         
alias la='ls -A'                                                                                                                                         
alias l='ls -CF'                                                                                                                                         
alias ls='ls --color -lax'
alias ungron="gron --ungron"

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# Script set up
export GOROOT=/usr/lib/go                                                                                                                                
export GOPATH=$HOME/go                                                                                                                                   
export PATH=$GOPATH/bin:$GOROOT/bin:$PATH
export TERM="xterm-256color"
source $GOPATH/src/github.com/tomnomnom/gf/gf-completion.zsh

